// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketBooking.Persistence;

#nullable disable

namespace TicketBooking.Persistence.Migrations
{
    [DbContext(typeof(TicketBookingDbContext))]
    partial class TicketBookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketBooking.Domain.Concert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountOfAvailableTickets")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfTickets")
                        .HasColumnType("int");

                    b.Property<string>("BandName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ConcertName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("GeoLat")
                        .HasColumnType("float");

                    b.Property<double>("GeoLng")
                        .HasColumnType("float");

                    b.Property<string>("Place")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Concerts");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TicketBooking.Domain.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("TicketBooking.Domain.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConcertId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketBooking.Domain.UsedCoupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId", "CouponId");

                    b.ToTable("UsedCoupons");
                });

            modelBuilder.Entity("TicketBooking.Domain.ClassicalConcert", b =>
                {
                    b.HasBaseType("TicketBooking.Domain.Concert");

                    b.Property<string>("Composer")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VoiceType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("ClassicalConcerts", (string)null);
                });

            modelBuilder.Entity("TicketBooking.Domain.OpenAir", b =>
                {
                    b.HasBaseType("TicketBooking.Domain.Concert");

                    b.Property<string>("GettingHere")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Headliner")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("OpenAirs", (string)null);
                });

            modelBuilder.Entity("TicketBooking.Domain.Party", b =>
                {
                    b.HasBaseType("TicketBooking.Domain.Concert");

                    b.Property<int>("AgeLimit")
                        .HasColumnType("int");

                    b.ToTable("Parties", (string)null);
                });

            modelBuilder.Entity("TicketBooking.Domain.Ticket", b =>
                {
                    b.HasOne("TicketBooking.Domain.Concert", "Concert")
                        .WithMany("Tickets")
                        .HasForeignKey("ConcertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("TicketBooking.Domain.ClassicalConcert", b =>
                {
                    b.HasOne("TicketBooking.Domain.Concert", null)
                        .WithOne()
                        .HasForeignKey("TicketBooking.Domain.ClassicalConcert", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketBooking.Domain.OpenAir", b =>
                {
                    b.HasOne("TicketBooking.Domain.Concert", null)
                        .WithOne()
                        .HasForeignKey("TicketBooking.Domain.OpenAir", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketBooking.Domain.Party", b =>
                {
                    b.HasOne("TicketBooking.Domain.Concert", null)
                        .WithOne()
                        .HasForeignKey("TicketBooking.Domain.Party", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketBooking.Domain.Concert", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
